
* Videos
  - [[http://www.infoq.com/presentations/Introducing-Immutant][Clojure/West 2012]] -- a dated overview of 5/6 of the api's
  - [[http://www.youtube.com/watch?v%3DP9tfxdcpkCc][Clojure/Conj 2012]] -- building a non-trivial app with an Immutant REPL
  - [[http://www.youtube.com/watch?v%3DKqdY0wz_Rb0][Overlay Screencast]] -- overlay TorqueBox to share messaging/caching 


* Immutant is an Application Server

** An integrated stack
   
   The [[file:images/immutant-runtime.png][Immutant runtime]] compared to [[file:images/tomcat-runtime.png][Jetty or Tomcat]]

   Simpler to manage
   All provided services scaled same way: clustering

** Analogous to an operating system

   OS provides sockets, file systems, init.d, etc
   AS provides clustering, messaging, scheduling, etc

** Better resource utilization
*** RAM
    One Immutant with 3 apps vs 3 Jetty instances
*** Disk
    Dependent libs in ~/.m2/repository

** Risks

*** Services and apps are isolated, but they share the JVM
*** App deps can conflict with deps used by Immutant
    e.g. noir->bultitude->dynapath

*** Relative paths are relative to the server, not the app


* The [[https://github.com/immutant/lein-immutant][lein-immutant]] plugin
  
** Tasks

   lein immutant install
   lein immutant overlay

   lein immutant run

   lein new immutant foo

   lein immutant deploy
   lein immutant undeploy

   lein immutant version
   lein immutant env

   lein immutant test


* Immutant libraries
  
  Functions whose side effects invoke JBoss services

  Examples: https://github.com/jcrossley3/random-apps-of-kindness/tree/master/demo

** Basic initialization

   - plugin creates a deployment descriptor with a :root
   - dependencies in project.clj set up effective classpath
   - 3 bootstrap options tried in order
     * (get-in project [:immutant :init])
     * (require immutant.init)
     * (get-in project [:ring :handler])

** immutant.web 

   - app segmentation via virtual host and/or context path
   - automatic session replication in a cluster
   - auto-reloading in dev mode
   - static resources [ring/ring-core "1.2.0-beta1"] or [[http://immutant.org/builds/LATEST/html-docs/apidoc/immutant.web.html#var-wrap-resource][immutant.web/wrap-resource]]
   - :ring config, e.g. :handler, :init, :destroy,
     stacktraces?, :auto-reload?, :reload-paths
   - handy reflection functions in immutant.util

   examples: [[file:~/src/apps/demo/src/demo/web.clj::(ns%20demo.web][demo/web.clj]]

** immutant.messaging
   
   - two destination abstractions: topics and queues
   - consumers automatically load-balanced across a cluster
   - message content can be just about anything
   - arbitrarily nested collections of standard data types can be
     transparently exchanged with any :edn or :json peers.
   - messages can be prioritized, filtered, and automatically expired
   - all messaging operations are transactional 
   - durable topic subscribers are supported
   - destinations may be remote

   - destination lifecycle is robust and dynamic
     * (start)
     * (stop)

   - produce 
     * (publish)
     * (request)
   - consume
     * (receive)
     * (message-seq)
     * (listen)
     * (respond)

   Examples: [[file:~/src/apps/demo/src/demo/messaging.clj::(ns%20demo.messaging][demo/messaging.clj]]

*** immutant.pipeline

    A composition of functions, i.e. steps, where each function is
    passed the result of the previous function. Built atop messaging,
    the concurrency of each step in a pipeline can vary and all steps
    are load-balanced across a cluster.

    Alpha

** immutant.jobs 

   - scheduled jobs share the lifecycle of your app
   - singleton by default (only one node in cluster)

*** cron syntax

    dash for spans, comma for multiples, division for rates

    | seconds |            0-59 |          |
    | minutes |            0-59 |          |
    | hours   |            0-23 |          |
    | dom     |            1-31 | ?        |
    | month   | 1-12 or JAN-DEC |          |
    | dow     |  1-7 or SUN-SAT | ?        |
    | year    |       1970-2099 | optional |

*** at options

    | :at     | java.util.Date or ms since epoch; illegal with a spec or :in             |
    | :in     | start in ms from now; illegal with a spec or :at                         |
    | :every  | delay interval in ms; illegal with a spec                                |
    | :repeat | # of repeats after initial firing; requires :every; illegal with a spec; |
    | :until  | java.util.Date or ms since epoch; illegal with a spec                    |

    Examples: [[file:../src/demo/jobs.clj::(ns%20demo.jobs][demo/jobs.clj]]

** immutant.cache
   
   - infinispan HA transactional data grid, key/value store
   - flexible clustering: :replicated, :invalidated, :distributed
   - eviction, expiration, persistence, conditional writes
   - implements core.cache/CacheProtocol
   - can be used with core.memoize/PluggableMemoization
   - can be shared with ruby apps in overlaid-torquebox
   - mutable operations in [[http://immutant.org/builds/LATEST/html-docs/apidoc/immutant.cache.html#var-Mutable][immutant.cache/Mutable]] protocol

   Examples: [[file:../src/demo/cache.clj::(ns%20demo.cache][demo/cache.clj]]

** immutant.daemons
   
   - pretty darn [[http://immutant.org/builds/LATEST/html-docs/apidoc/immutant.daemons.html#var-Daemon][simple]]
   - most interesting as HA singleton in cluster

   Examples: [[file:../src/demo/daemons.clj::(ns%20demo.daemons][demo/daemons.clj]]

** immutant.xa

   - multi-resource distributed transactions
   - messaging and caching automatically transactional
   - use immutant.xa/datasource to create transactional resources
   - macros instead of scope annotations, e.g. required, requires-new, not-supported

   Examples: [[file:../src/demo/xa.clj::(ns%20demo.xa][demo/xa.clj]]


* Other stuff
** Overlay

   checkout the [[http://immutant.org/news/2013/03/07/overlay-screencast/][screencast]] 

** Clustering

   # If multicast is enabled
   $ lein immutant run --clustered

   # If multicast is disabled, there will be XML dragons to tame

   # Simulate locally with port offset
   $ lein immutant run --clustered -Djboss.node.name=one -Djboss.server.data.dir=/tmp/one
   $ lein immutant run --clustered -Djboss.node.name=two -Djboss.server.data.dir=/tmp/two -Djboss.socket.binding.port-offset=100

   # ...or IP aliases
   $ sudo ifconfig en1 inet 192.168.6.201/32 alias
   $ lein immutant run --clustered -b 192.168.6.201 -Djboss.node.name=one -Djboss.server.data.dir=/tmp/one

** OpenShift

   checkout the [[https://github.com/openshift-quickstart/immutant-quickstart][quickstart]]

   should be a good example of working ec2 multicast-less clustering

** In-container testing

   Provided by the [[https://github.com/immutant/fntest][fntest]] library

     $ lein immutant test

** Web sockets COMING SOON (eventually... we hope)
